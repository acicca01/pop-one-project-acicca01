y.pred.radial.G1C1e5 <-predict (svmfit.radial.G1C1e5,newdata=x.test)
mean(y.pred.radial.G1C1e5 != y.test)
set.seed(1)
tune.out.radial <-tune(svm,y ~ . , data = dat2.train,kernel = 'radial', ranges = list(cost= c(0.1,1,10,100,1000)),gamma = c(0.5,1,2,3,4))
summary(tune.out.radial)
tune.out.radial <-tune(svm,y ~ . , data = dat2.train,kernel = 'radial', ranges = list(cost= c(0.1,1,10,100,1000),gamma = c(0.5,1,2,3,4))
)
tune.out.radial <-tune(svm,y ~ . , data = dat2.train,kernel = 'radial', ranges = list(cost= c(0.1,1,10,100,1000),gamma = c(0.5,1,2,3,4)))
summary(tune.out.radial)
set.seed(1)
tune.out.radial <-tune(svm,y ~ . , data = dat2.train,kernel = 'radial', ranges = list(cost= c(0.1,1,10,100,1000),gamma = c(0.5,1,2,3,4)))
summary(tune.out.radial)
y.pred.radial.best <- predict(tune.out.radial$best.model,newdata=x.test)
mean(y.pred.radial.best!=y.test)
plot(tune.out.radial$best.model,data=dat2.train)
city.data <- read.delim("D:/Pycharm/pop-one-project-acicca01/city-data.txt", header=FALSE)
View(city.data)
city.sub <- city.data[1:5,]
View(city.sub)
write.table(city.sub,file="city.sub",sep="\t")
write.table(city.sub,file="city.sub",sep="\t")
ls
setwd(D:/Pycharm/pop-one-project-acicca01)
setwd(D://Pycharm//pop-one-project-acicca01)
setwd(D:\\Pycharm\\pop-one-project-acicca01)
getwd
getwd()
setwd(D:/Pycharm/pop-one-project-acicca01)
setwd("D:\\Pycharm\\pop-one-project-acicca01")
write.table(city.sub,file="city.sub",sep="\t")
write.table(city.sub,file="city.sub",sep="\t",col.name=FALSE,row.names = FALSE)
sum(dist(city.sub))
city.sub
sum(dist(city.sub[,c(3,4)]))
write.table(city.data[1:3,],file="city.sub",sep="\t",col.name=FALSE,row.names = FALSE)
sum(dist(city.data[1:3,c(3,4)]))
sum(dist(city.data[1:4,c(3,4)]))
write.table(city.data[1:4,],file="city.sub",sep="\t",col.name=FALSE,row.names = FALSE)
sqrt((32.361538-58.301935)**2+(-86.279118+134.41974)**2)
library(raster)
pointDistance(c(32.361538,-86.279118), c(58.301935,	-134.41974))
pointDistance(c(32.361538,-86.279118), c(58.301935,	-134.41974),lonlat=FALSE)
pointDistance(c(33.448457 , -112.073844), c(58.301935,	-134.41974),lonlat=FALSE)
pointDistance(c(33.448457 , -112.073844), c(34.736009	-92.331122),lonlat=FALSE)
pointDistance(c(33.448457 , -112.073844), c(34.736009,	-92.331122),lonlat=FALSE)
pointDistance(c(32.361538,-86.279118), c(34.736009,	-92.331122),lonlat=FALSE)
54.68477+33.42207+19.78466+6.501143
dist(city.data[1:4,c(3,4)])
M = dist(city.data[1:4,c(3,4)])
M
M[1][1]
diag(M)
X = diag(M)
M = as.matrix(dist(city.data[1:4,c(3,4)]))
M
M = as.matrix(dist(city.data[1:4,c(3,4)],diag=FALSE))
M
M = dist(city.data[1:4,c(3,4)])
M
M[2]
M[4]
M[5]
M[8]
M = as.vector(dist(city.data[1:4,c(3,4)]))
M
M = dist(city.data[1:4,c(3,4)])
M[1][2]
M = as.matrix(dist(city.data[1:4,c(3,4)],diag=FALSE))
for (i in seq(1:4))
{
print i
}
for (i in seq(1:4))
{
print (i)
}
M
lower.tri(M)
trace(M)
sum(M[lower.tri(M)[nrow(M):1,] & upper.tri(M)])
write.table(city.data[1:3,],file="city.sub",sep="\t",col.name=FALSE,row.names = FALSE)
M = dist(city.data[1:3,c(3,4)])
M
MM <-as.matrix(M)
MM
M = dist(city.data[1:2,c(3,4)])
MM <-as.matrix(M)
MM
M
M = dist(city.data[1:4,c(3,4)])
M
M[3][4]
str(M)
printit <- function(M,n){
for (i in seq(1:(n*(n-1))/2)
{
print(M[i])
}
}
printit(M,4)
printit <- function(M,n){
for (i in seq(1:(n*(n-1))/2))
{
print(M[i])
}
}
printit(M,4)
M
printit <- function(M,n){
for (i in seq(1:(n*(n-1))/2))
{
print(i , M[i])
}
}
printit(M,4)
printit <- function(M,n){
for (i in seq(1:(n*(n-1))/2))
{
print( paste(i) M[i])
}
}
printit(M,4)
printit(M,4)
printit <- function(M,n){
for (i in seq(1:(n*(n-1))/2))
{
print(i)
print(  M[i])
}
}
printit(M,4)
printit <- function(M,n){
for (i in seq(1:(n*(n-1)/2)))
{
print(i)
print(  M[i])
}
}
printit(M,4)
printit <- function(M,n){
for (i in seq(1:(n*(n-1)/2)))
{
print(  M[i])
}
}
printit(M,4)
M = dist(city.data[1:5,c(3,4)])
printit(M,5)
MM<-as.matrix(M)
MM
M = dist(city.data[1:4,c(3,4)])
MM <-as.matrix(M)
M
MM
printit(M,4)
MM
x <-seq((10*10-1)/2)
x
M
MM
MM[1=2]
MM[1==2]
MM[lower.tri(MM)]
sumit <- function(M,n){
MM<-as.matrix(MM)
for (i in  (1:n)))
{
for (j in (1:n)){
if (i > j and i-j == 1) {sum = MM[i][j]}
}
}
}
sumit <- function(M,n){
MM<-as.matrix(MM)
for (i in  (1:n)))
{
for (j in (1:n)){
if (i > j and i-j == 1) {
sum = MM[i][j]
}
}
}
}
sumit <- function(M,n){
MM<-as.matrix(MM)
for (i in  (1:n)))
{
for (j in (1:n)){
if (i > j and i-j == 1) {
sum = MM[i][j]
}
}
}
}
sumit <- function(M,n){
MM<-as.matrix(M)
for (i in  (1:n)))
{
for (j in (1:n)){
if (i > j and i-j == 1) {
sum = MM[i][j]
}
}
}
}
sumit <- function(M,n){
MM<-as.matrix(M)
for (i in  (1:n))
{
for (j in (1:n)){
if (i > j and i-j == 1) {
sum = MM[i][j]
}
}
}
}
sumit <- function(M,n){
MM<-as.matrix(M)
for (i in  seq(1:n))
{
for (j in seq_len(1:n)){
if (i > j and i-j == 1) {
sum = MM[i][j]
}
}
}
}
sumit <- function(M,n){
MM<-as.matrix(M)
for (i in  seq(1:n))
{
for (j in seq_len(1:n)){
if (i > j  ) {
sum = MM[i][j]
}
}
}
}
sumit <- function(M,n){
MM<-as.matrix(M)
for (i in  seq(1:n))
{
for (j in seq_len(1:n)){
if (i > j  ) {
sum = MM[i][j]
}
}
}
}
sumit <- function(M,n){
MM<-as.matrix(M)
for (i in  seq(1:n))
{
for (j in seq_len(1:n)){
if (i > j &&i-j == 1) {
sum = MM[i][j]
}
}
}
}
sumit <- function(M,n){
MM<-as.matrix(M)
for (i in  seq(1:n))
{
for (j in seq_len(1:n)){
if (i > j &&i-j == 1) {
somma = MM[i][j]
}
}
}
print(somma)
}
M
M = dist(city.data[1:4,c(3,4)])
somma(M,4)
sumit(M,4)
sumit <- function(M,n){
MM<-as.matrix(M)
somma <- 0
for (i in  seq(1:n))
{
for (j in seq_len(1:n)){
if (  i-j == 1) {
somma <- MM[i][j]
}
}
}
print(somma)
}
sumit(M,4)
sumit <- function(M,n){
MM<-as.matrix(M)
somma <- 0
for (i in  seq(1:n))
{
for (j in seq(1:n)){
if (  i-j == 1) {
somma <- MM[i][j]
}
}
}
print(somma)
}
sumit(M,4)
sumit <- function(M,n){
MM<-as.matrix(M)
somma <- 0
for (i in  seq(1:n))
{
for (j in seq(1:n)){
if (  i-j == 1) {
print(MM[i][j])
somma <- MM[i][j]
}
}
}
print(somma)
}
sumit(M,4)
MM
sumit <- function(M,n){
MM<-as.matrix(M)
somma <- 0
for (i in  seq(1:n))
{
for (j in seq(1:n)){
print(MM[i][j])
somma <- MM[i][j]
}
}
print(somma)
}
MM
sumit(M,4)
MM[1][1]
M[1][2]
MM
MM[1][2]
MM
MM[1,2]
MM[1,3]
sumit <- function(M,n){
MM<-as.matrix(M)
somma <- 0
for (i in  seq(1:n))
{
for (j in seq(1:n)){
if (  i-j == 1) {
print(MM[i,j])
somma <- MM[i,j]
}
}
}
print(somma)
}
sumit(M,4)
sumit <- function(M,n){
MM<-as.matrix(M)
somma <- 0
for (i in  seq(1:n))
{
for (j in seq(1:n)){
if (if i > j &&  i-j == 1) {
print(MM[i,j])
somma <- MM[i,j]
}
}
}
print(somma)
}
sumit <- function(M,n){
MM<-as.matrix(M)
somma <- 0
for (i in  seq(1:n))
{
for (j in seq(1:n)){
if (if i > j  i-j == 1) {
print(MM[i,j])
somma <- MM[i,j]
}
}
}
print(somma)
}
sumit <- function(M,n){
MM<-as.matrix(M)
somma <- 0
for (i in  seq(1:n))
{
for (j in seq(1:n)){
if ( i > j && i-j == 1) {
print(MM[i,j])
somma <- MM[i,j]
}
}
}
print(somma)
}
sumit(M,4)
sumit <- function(M,n){
MM<-as.matrix(M)
somma <- 0
for (i in  seq(1:n))
{
for (j in seq(1:n)){
if ( i > j && i-j == 1) {
print(MM[i,j])
somma <- MM[i,j]
}
}
}
print(somma)
}
sumit(M,4)
MM
MM[3,2]
sumit <- function(M,n){
MM<-as.matrix(M)
somma <- 0
for (i in  seq(1:n))
{
for (j in seq(1:n)){
if ( i > j && i-j == 1) {
print (c(i,j))
print(MM[i,j])
somma <- MM[i,j]
}
}
}
print(somma)
}
sumit(M,4)
MM
sumit <- function(M,n){
MM<-as.matrix(M)
somma <- MM[1,n]
for (i in  seq(1:n))
{
for (j in seq(1:n)){
if ( i > j && i-j == 1) {
somma <- somma + MM[i,j]
}
}
}
print(somma)
}
sumit(M,4)
M = dist(city.data[,c(3,4)])
sumit(M,50)
source('D:/R/map_distance.R', echo=TRUE)
city3 <- city.data[seq(1:3),]
city3_swap <-city.data[c(2,1,3),]
city3
city3_swap
city3_dist <- dist(city3[,c(3,4)])
city3_swap_dist <- dist(city3_swap[,c(3,4)])
city3_dist
cycle_distance(city3_dist,3)
cycle_distance(city3_swap_dist,3)
city3_swap
city3_swap_dist
city3 <- city.data[seq(1:30),]
city3_dist <- dist(city3[,c(3,4)])
city3_dist <- cycle_distance(dist(city3[,c(3,4)]))
city3_dist <- cycle_distance(dist(city3[,c(3,4)]),30)
city3
city3_swap <- city3[c(10,seq(1:9),seq(11:30)),]
city3_swap
city3_swap <- city3[c(10,seq(1:9)),]
city3_swap
city3_swap <- city3[c(10,seq(1:9),11),]
city3_swap
city3_swap <- city3[c(10,seq(1:9),seq(11:30)),]
city3_swap
city3_swap <- city3[c(10,seq(1:9),seq(11:12)),]
city3_swap
city3_swap <- rbind(city3[10,],city3[seq(1:9),])
city3_swap
city3_swap <- rbind(city3[10,],city3[seq(1:9),], city3[seq(11:30),])
city3
city3_swap
View(city3)
View(city3_swap)
city3_swap <- rbind(city3[10,],city3[seq(1:9),], city3[seq(11:30),])
city3[seq(11:30),]
city3[1:10,]
city3_swap <- city3[c(10,1:9,11:30),]
cycle_distance(dist(city3_swap[,c(3,4)]),30)
city3_swap_dist <- cycle_distance(dist(city3_swap[,c(3,4)]),30)
city.data_dist <- cycle_distance(dist(city.data[,c(3,4)]),50)
city.swap <- city.data[c(10,1:9,11:50),]
View(city.swap)
city.swap_dist <- cycle_distance(dist(city.swap[,c(3,4)]),50)
install.packages("ggmap")
library(ggmap)
qmap(location = "Atlanta")
?register_ggole
?register_google
city.swap <- city.data[c(32,1:31,33:50),]
View(city.swap)
city.swap_dist <- cycle_distance(dist(city.swap[,c(3,4)]),50)
city.swap <- city.data[c(32,2:31,32,33:50),]
city.swap <- city.data[c(32,2:31,1,33:50),]
View(city.swap)
city.swap_dist <- cycle_distance(dist(city.swap[,c(3,4)]),50)
library(haven)
masterunits <- read_sas("E:/SAS/masterunits.sas7bdat",
NULL)
View(masterunits)
history
history()
write.table(city.swap,file="city-sub.txt",sep="\t",col.name=FALSE,row.names = FALSE)
